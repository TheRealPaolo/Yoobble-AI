//ignore_for_file: use_super_parameters, unused_element, deprecated_member_use, avoid_print, unnecessary_to_list_in_spreads
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:sizer/sizer.dart';
import 'package:url_launcher/url_launcher.dart';
import 'dart:async';
import '../stripe/paywall.dart'; // Make sure this path is correct
import '../utils/contact.dart'; // Make sure this path is correct
import '../utils/responsive.dart';
import '../widgets/country.dart'; // Make sure this path is correct
import 'login.dart'; // Make sure this path is correct

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  final ScrollController _scrollController = ScrollController();
  bool _showFloatingCTA = false;

  // List of phrases for the animated text
  final List<String> _changingPhrases = [
    "write everything,",
    "translate and quote,",
    "shape your tone,",
    "make your custom AI.",
  ];

  // Timer for changing the phrase
  Timer? _phraseTimer;

  // FAQ Data - UPDATED AS REQUESTED
  final List<Map<String, String>> _faqData = [
    {
      "question": "Do I need to manually publish content generated by Yoobble?",
      "answer":
          "Yes, Yoobble empowers you to generate high-quality content quickly (social posts, emails, blogs, etc.). While we facilitate easy copy-pasting for platforms like LinkedIn to avoid account risks, you maintain full control over when and where your content is published. This ensures brand authenticity and compliance with platform policies."
    },
    {
      "question":
          "How much content should I aim to create to see growth and conversions?",
      "answer":
          "Consistency is key across all platforms. While specific metrics vary, we've observed that generating high-quality content consistently, even once a week per platform (e.g., a social post, a blog snippet, an email paragraph), is a strong minimum. Yoobble's diverse content generation and expert agents make it easy to maintain this output, driving higher engagement, audience growth, and ultimately, conversions."
    },
    {
      "question":
          "How is Yoobble different from general AI tools like ChatGPT?",
      "answer":
          "Unlike broad AI models such as ChatGPT, Yoobble is a specialized content creation assistant built specifically for marketers, creators, and businesses. We focus on generating diverse, high-quality content optimized for engagement, virality, and lead generation across platforms like LinkedIn, TikTok, YouTube, and for emails and blogs. Yoobble includes specialized 'Content Agents,' custom AI chatbot creation, and features like effortless citations and instant translationâ€”all designed to streamline your workflow and convert users, not just provide general information."
    },
    {
      "question":
          "Will Yoobble replace the need for other content marketing tools or premium subscriptions?",
      "answer":
          "Yoobble is designed to be your comprehensive content hub, significantly reducing the need for multiple specialized tools for writing, brainstorming, and translation. You won't need external content generation tools. For platform-specific premium features (like LinkedIn Premium's conversion buttons), those are separate, but for the core content creation and optimization, Yoobble aims to be your all-in-one solution, saving you time and resources."
    }
  ];

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 800),
    )..forward();

    _scrollController.addListener(() {
      setState(() {
        // Show floating CTA after scrolling past the hero section
        _showFloatingCTA = _scrollController.offset > 600;
      });
    });

    // Start the phrase changing timer
    // This timer logic doesn't actually change anything in this snippet,
    // but is kept as per the original code.
    _phraseTimer = Timer.periodic(const Duration(seconds: 3), (timer) {});
  }

  @override
  void dispose() {
    _animationController.dispose();
    _scrollController.dispose();
    _phraseTimer?.cancel(); // Cancel the timer
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Define Logo URL once
    const String logoUrl =
        "https://firebasestorage.googleapis.com/v0/b/youcloud-c5d07.appspot.com/o/photo_2024-09-13_15-06-48-removebg-preview.png?alt=media&token=a1f3ac40-33fc-45f9-a295-43b7a6d5be9e";
    // Define Placeholder Logo Asset Path once
    const String logoPlaceholder = "assets/QQ.jpg";

    return ResponsiveWidget(
      // ########################################################################
      // #                             MOBILE VIEW                            #
      // ########################################################################
      mobile: Scaffold(
        backgroundColor: Colors.white,
        floatingActionButton: _showFloatingCTA
            ? FadeTransition(
                opacity: CurvedAnimation(
                  parent: _animationController, // Use local controller
                  curve: Curves.easeIn,
                ),
                child: FloatingActionButton.extended(
                  backgroundColor: Colors.black,
                  foregroundColor: Colors.white,
                  icon: const Icon(Icons.bolt),
                  label: const Text('Get Started'),
                  onPressed: () {
                    Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => const LoginScreen()));
                  },
                ),
              )
            : null,
        body: SingleChildScrollView(
          controller: _scrollController,
          child: Column(
            children: [
              // --- Mobile AppBar ---
              _buildMobileAppBar(context, logoUrl, logoPlaceholder),

              // --- Mobile Hero Section ---
              _buildMobileHeroSection(context),

              // Scrolling indicators (MODIFIED)
              _buildScrollIndicator(),

              // --- Feature Sections ---
              _buildFeatureSectionMobile(
                context: context,
                bgColor: const Color(0xFFF8F9FA),
                title: 'Generate Diverse Content',
                subtitle: 'Social Posts, Emails, Blogs & More',
                description:
                    "Need content fast? Generate engaging social media posts, professional emails, captivating blog articles, compelling product descriptions, creative scripts, and effective sales copy effortlessly.",
                bulletPoints: [
                  "Engaging Social Media Posts",
                  "Professional Emails in Seconds",
                  "Captivating Blog Articles",
                  "Compelling Product Descriptions",
                  "Creative Scripts & Stories",
                  "High-Converting Sales Copy",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y2.png",
                showAnimation: true,
              ),

              _buildFeatureSectionMobile(
                context: context,
                bgColor: Colors.white,
                title: 'Chat with Yoobble',
                subtitle: 'Your Creative Partner',
                description:
                    "Stuck for ideas? Chat with Yoobble to brainstorm, refine your thoughts, overcome writer's block, and explore different angles for your content. Create your own AI chatbot with your unique personality. Become an AI version of yourself - it's like having a co-writer available 24/7.",
                bulletPoints: [
                  "Brainstorm ideas instantly",
                  "Refine your drafts collaboratively",
                  "Overcome writer's block",
                  "Explore different creative angles",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y3.png",
                imageFirst: true,
                showAnimation: true,
              ),

              _buildFeatureSectionMobile(
                context: context,
                bgColor: const Color(0xFFF8F9FA),
                title: 'Effortless Citations',
                subtitle: 'Academic & Research Ready',
                description:
                    "Writing a research paper or academic article? Generate accurate citations in various standard formats (APA, MLA, Chicago, etc.) quickly and easily. Focus on your writing, not citation formatting.",
                bulletPoints: [
                  "Generate citations quickly",
                  "Support for multiple formats (APA, MLA...)",
                  "Ensure academic integrity",
                  "Focus on your writing, not formatting",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y4.png",
                showAnimation: true,
              ),

              _buildFeatureSectionMobile(
                context: context,
                bgColor: Colors.white,
                title: 'Expert Content Agents',
                subtitle: 'Tailored Content Generation',
                description:
                    "Access specialized AI agents trained for specific tasks. Use the 'Blog Post Writer', 'Ad Copy Generator', 'Poetry Creator', and more to get tailored content that meets your exact needs.",
                bulletPoints: [
                  "Access specialized writing agents",
                  "Get tailored content instantly",
                  "Simplify complex writing tasks",
                  "Maintain consistent tone and style",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y5.png",
                imageFirst: true,
                showAnimation: true,
              ),

              _buildFeatureSectionMobile(
                context: context,
                bgColor: const Color(0xFFF8F9FA),
                title: 'Instant AI Translation',
                subtitle: 'Multilingual & Context-Aware',
                description:
                    "Effortlessly translate your text into various languages with the precision of AI. Enjoy real-time translations that preserve context and natural language flow, making your content accessible globally.",
                bulletPoints: [
                  "Real-time language translation",
                  "Supports multiple languages",
                  "Context-aware accuracy",
                  "User-friendly interface",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y6.png",
                showAnimation: true,
              ),

              // --- FAQ Section Mobile ---
              _buildFAQSectionMobile(),

              // --- Privacy Matters Section ---
              _buildPrivacySectionMobile(),

              // --- Global Section ---
              _buildGlobalSectionMobile(),

              // --- Final CTA Section ---
              buildFinalCTAMobile(context),

              // --- Mobile Footer ---
              _buildFooterMobile(logoUrl, logoPlaceholder, context),
            ],
          ),
        ),
      ),

      // ########################################################################
      // #                            DESKTOP VIEW                            #
      // ########################################################################
      desktop: Scaffold(
        backgroundColor: Colors.white,
        floatingActionButton: _showFloatingCTA
            ? FadeTransition(
                opacity: CurvedAnimation(
                  parent: _animationController, // Use local controller
                  curve: Curves.easeIn,
                ),
                child: FloatingActionButton.extended(
                  backgroundColor: Colors.black,
                  foregroundColor: Colors.white,
                  icon: const Icon(Icons.bolt),
                  label: const Text('Start Creating Now'),
                  onPressed: () {
                    Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => const LoginScreen()));
                  },
                ),
              )
            : null,
        // --- Desktop AppBar ---
        appBar: buildDesktopAppBar(context, logoUrl, logoPlaceholder),

        // --- Desktop Body ---
        body: SingleChildScrollView(
          controller: _scrollController,
          child: Column(
            children: [
              // --- Desktop Hero Section ---
              _buildDesktopHeroSection(context),

              // --- Feature Sections ---
              _buildFeatureSectionDesktop(
                context: context,
                bgColor: const Color(0xFFF8F9FA),
                title: 'Generate Diverse Content',
                subtitle: 'Social Posts, Emails, Blogs & More',
                description:
                    "Need content fast? Generate engaging social media posts, professional emails, captivating blog articles, compelling product descriptions, creative scripts, and effective sales copy effortlessly with Yoobble.",
                bulletPoints: [
                  "Engaging Social Media Posts",
                  "Professional Emails in Seconds",
                  "Captivating Blog Articles",
                  "Compelling Product Descriptions",
                  "Creative Scripts & Stories",
                  "High-Converting Sales Copy",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y2.png",
                textLeft: true,
              ),

              _buildFeatureSectionDesktop(
                context: context,
                bgColor: Colors.white,
                title: 'Chat with Yoobble',
                subtitle: 'Your Creative Partner',
                description:
                    "Stuck for ideas? Chat with Yoobble to brainstorm, refine your thoughts, overcome writer's block, and explore different angles for your content. Create your own AI chatbot with your unique personality. Become an AI version of yourself - it's like having a co-writer available 24/7.",
                bulletPoints: [
                  "Brainstorm ideas instantly",
                  "Refine your drafts collaboratively",
                  "Overcome writer's block",
                  "Explore different creative angles",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y3.png",
                textLeft: false,
              ),

              _buildFeatureSectionDesktop(
                context: context,
                bgColor: const Color(0xFFF8F9FA),
                title: 'Effortless Citations',
                subtitle: 'Academic & Research Ready',
                description:
                    "Writing a research paper or academic article? Generate accurate citations in various standard formats (APA, MLA, Chicago, etc.) quickly and easily. Focus on your writing, not citation formatting.",
                bulletPoints: [
                  "Generate citations quickly",
                  "Support for multiple formats (APA, MLA...)",
                  "Ensure academic integrity",
                  "Focus on your writing, not formatting",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y4.png",
                textLeft: true,
              ),

              _buildFeatureSectionDesktop(
                context: context,
                bgColor: Colors.white,
                title: 'Expert Content Agents',
                subtitle: 'Tailored Content Generation',
                description:
                    "Access specialized AI agents trained for specific tasks. Use the 'Blog Post Writer', 'Ad Copy Generator', 'Poetry Creator', and more to get tailored content that meets your exact needs.",
                bulletPoints: [
                  "Access specialized writing agents",
                  "Get tailored content instantly",
                  "Simplify complex writing tasks",
                  "Maintain consistent tone and style",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y5.png",
                textLeft: false,
              ),

              _buildFeatureSectionDesktop(
                context: context,
                bgColor: const Color(0xFFF8F9FA),
                title: 'Instant AI Translation',
                subtitle: 'Multilingual & Context-Aware',
                description:
                    "Effortlessly translate your text into various languages with the precision of AI. Enjoy real-time translations that preserve context and natural language flow, making your content accessible globally.",
                bulletPoints: [
                  "Real-time language translation",
                  "Supports multiple languages",
                  "Context-aware accuracy",
                  "User-friendly interface",
                ],
                imageUrl: logoUrl,
                imageAsset: "assets/Y6.png",
                textLeft: true,
              ),

              // --- FAQ Section Desktop ---
              _buildFAQSectionDesktop(),

              // --- Desktop Privacy Section ---
              _buildPrivacySectionDesktop(),

              // --- Desktop Global Section ---
              _buildGlobalSectionDesktop(),

              // --- Desktop Final CTA Section ---
              buildFinalCTADesktop(context),

              // --- Desktop Footer ---
              _buildFooterDesktop(logoUrl, logoPlaceholder, context),
            ],
          ),
        ),
      ),
    );
  }

  // ########################################################################
  // #                       MOBILE SECTION BUILDERS                       #
  // ########################################################################

  Widget _buildMobileAppBar(
      BuildContext context, String logoUrl, String logoPlaceholder) {
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      padding: EdgeInsets.symmetric(horizontal: 5.w, vertical: 2.h),
      child: Row(
        children: [
          CachedNetworkImage(
            height: 40,
            imageUrl: logoUrl,
            placeholder: (context, url) => Image.asset(
              logoPlaceholder,
              height: 40,
            ),
            errorWidget: (context, url, error) => Image.asset(
              logoPlaceholder,
              height: 40,
            ),
          ),
          Padding(
            padding: EdgeInsets.only(left: 2.w),
            child: Text(
              'Yoobble',
              style: GoogleFonts.montserrat(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
          const Spacer(),
          IconButton(
            onPressed: () {
              _showFullScreenMenu(context, logoUrl, logoPlaceholder);
            },
            icon: const Icon(
              Icons.menu,
              color: Colors.black,
              size: 28,
            ),
          )
        ],
      ),
    );
  }

  Widget _buildMobileHeroSection(BuildContext context) {
    return SlideTransition(
      position: Tween<Offset>(
        begin: const Offset(0, 0.1),
        end: Offset.zero,
      ).animate(CurvedAnimation(
        parent: _animationController, // Use local controller
        curve: Curves.easeOutQuart,
      )),
      child: FadeTransition(
        opacity: CurvedAnimation(
          parent: _animationController, // Use local controller
          curve: const Interval(0.2, 1.0, curve: Curves.easeOut),
        ),
        child: Padding(
          padding: EdgeInsets.symmetric(horizontal: 5.w, vertical: 6.h),
          child: Column(
            children: [
              // --- Animated Hero Text ---
              Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Static part with original gradient
                  ShaderMask(
                    shaderCallback: (bounds) => const LinearGradient(
                      colors: [Color(0xFF2D3748), Color(0xFF000000)],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ).createShader(bounds),
                    child: Text(
                      'One platform to', // Static text
                      style: GoogleFonts.poppins(
                        fontSize: 36, // Match original size
                        fontWeight: FontWeight.bold, // Match original weight
                        color: Colors.white, // The ShaderMask will color it
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  SizedBox(height: 0.5.h), // Small space between lines
                  // Animated changing part with flame gradient
                  AnimatedSuffix(
                    phrases: _changingPhrases,
                    textStyle: GoogleFonts.poppins(
                      fontSize: 28, // Match original size
                      fontWeight: FontWeight.bold, // Match original weight
                      color: Colors.white, // ShaderMask will color it
                    ),
                    gradient: const LinearGradient(
                      colors: [
                        Color.fromARGB(255, 41, 80, 164),
                        Color(0xFF2D3748)
                      ], // Flame colors
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    interval: const Duration(seconds: 3),
                  ),
                ],
              ),

              SizedBox(height: 4.h),
              Container(
                padding: EdgeInsets.symmetric(horizontal: 3.w, vertical: 2.h),
                decoration: BoxDecoration(
                  color: Colors.grey.shade50,
                  borderRadius: BorderRadius.circular(15),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.03),
                      blurRadius: 10,
                      spreadRadius: 1,
                    ),
                  ],
                ),
                child: Text(
                  'Yoobble empowers creators, marketers, and businesses to generate high-quality content in minutes. Say goodbye to writer\'s block and hello to effortless creation.',
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    height: 1.6,
                    color: Colors.grey.shade800,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              SizedBox(height: 3.5.h),
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => const LoginScreen()));
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.black,
                  foregroundColor: Colors.white,
                  elevation: 5,
                  shadowColor: Colors.black.withOpacity(0.3),
                  padding:
                      EdgeInsets.symmetric(horizontal: 10.w, vertical: 1.8.h),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Icon(
                      Icons.bolt,
                      size: 20,
                      color: Colors.white,
                    ),
                    SizedBox(width: 1.w),
                    const Text(
                      "Start Creating Free",
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: 6.h),
              // Mock UI preview image
              Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 20,
                      spreadRadius: 5,
                      offset: const Offset(0, 10),
                    ),
                  ],
                ),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(20),
                  child: Image.asset(
                    "assets/Y1.png",
                    fit: BoxFit.cover,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  //scroll indicator for mobile
  Widget _buildScrollIndicator() {
    const double imageSize = 30.0; // Adjust size as needed for mobile
    const double overlap = 18.0; // Adjust overlap amount (imageSize * 0.6)
    const double socialIconSizeMobile = 70.0; // Size for new social icons

    return Padding(
      padding: EdgeInsets.only(top: 2.h, bottom: 4.h),
      child: Column(
        children: [
          Text(
            "Scroll to discover",
            style: GoogleFonts.inter(
              fontSize: a12,
              color: Colors.grey.shade600,
            ),
          ),
          SizedBox(height: 1.h),
          Icon(
            Icons.keyboard_arrow_down_rounded,
            size: 24,
            color: Colors.grey.shade600,
          ),
          SizedBox(height: 3.h), // Space between icon and new element

          // Container with images and text
          Container(
            padding: const EdgeInsets.symmetric(
                horizontal: 15, vertical: 8), // Adjusted padding
            decoration: BoxDecoration(
              color: Colors.grey.shade100, // Light gray background
              borderRadius: BorderRadius.circular(30), // Rounded ends
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 5,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min, // Keep the row size minimal
              children: [
                // Stack for overlapping circular images
                Stack(
                  alignment:
                      Alignment.centerLeft, // Align stack content to the left
                  children: [
                    // Image 1
                    ClipOval(
                      child: Image.asset('assets/R2.jpg',
                          width: imageSize,
                          height: imageSize,
                          fit: BoxFit.cover),
                    ),
                    // Image 2 (positioned to overlap)
                    Positioned(
                      left: imageSize -
                          overlap, // Position relative to first image
                      child: ClipOval(
                        child: Image.asset('assets/R3.jpg',
                            width: imageSize,
                            height: imageSize,
                            fit: BoxFit.cover),
                      ),
                    ),
                    // Image 3 (positioned to overlap)
                    Positioned(
                      left: 2 *
                          (imageSize -
                              overlap), // Position relative to second image
                      child: ClipOval(
                        child: Image.asset('assets/R4.jpg',
                            width: imageSize,
                            height: imageSize,
                            fit: BoxFit.cover),
                      ),
                    ),
                    // Dummy sized box to give the Stack a defined width based on overlap
                    SizedBox(width: 3 * imageSize - 2 * overlap),
                  ],
                ),
                const SizedBox(width: 10), // Space between images and text
                // Text "Join 3,300+ creators"
                Text(
                  'Join 100+ Yoobblers',
                  style: GoogleFonts.inter(
                    fontSize: 13, // Adjust font size for mobile
                    fontWeight: FontWeight.w500,
                    color: Colors.grey.shade800,
                  ),
                ),
              ],
            ),
          ),
          SizedBox(height: 4.h), // Space after the join text

          // New: Text below social platform images
          Text(
            "Optimized for the most popular platforms",
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
                fontSize: 16,
                color: Colors.grey.shade600,
                fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 2.h), // Space after the join text
          // New: Row of social platform images
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ClipOval(
                child: Image.asset(
                    'assets/linkedIn.png', // Assuming .png extension
                    width: socialIconSizeMobile,
                    height: socialIconSizeMobile,
                    fit: BoxFit.contain),
              ),
              SizedBox(width: 3.w),
              ClipOval(
                child:
                    Image.asset('assets/tiktok.png', // Assuming .png extension
                        width: socialIconSizeMobile,
                        height: socialIconSizeMobile,
                        fit: BoxFit.contain),
              ),
              SizedBox(width: 3.w),
              ClipOval(
                child:
                    Image.asset('assets/youtube.png', // Assuming .png extension
                        width: socialIconSizeMobile,
                        height: socialIconSizeMobile,
                        fit: BoxFit.contain),
              ),
              SizedBox(width: 3.w),
              ClipOval(
                child:
                    Image.asset('assets/wattpad.png', // Assuming .png extension
                        width: socialIconSizeMobile,
                        height: socialIconSizeMobile,
                        fit: BoxFit.contain),
              ),
            ],
          ),
          SizedBox(height: 2.h), // Space between images and text
        ],
      ),
    );
  }

  Widget _buildFAQSectionMobile() {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(vertical: 6.h, horizontal: 5.w),
      decoration: BoxDecoration(
        color: const Color(0xFFF8F9FA), // Similar to feature sections
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.03),
            blurRadius: 10,
            spreadRadius: 1,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFF2D3748), Color(0xFF000000)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds),
            child: Text(
              "Frequently Asked Questions",
              textAlign: TextAlign.center,
              style: GoogleFonts.poppins(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.white, // Color is masked by shader
              ),
            ),
          ),
          SizedBox(height: 1.5.h),
          Text(
            "Quick answers to common questions about Yoobble.",
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 14,
              color: Colors.grey.shade700,
            ),
          ),
          SizedBox(height: 4.h),
          ..._faqData
              .map((faq) => _FAQItem(
                    question: faq['question']!,
                    answer: faq['answer']!,
                    isMobile: true,
                  ))
              .toList(),
        ],
      ),
    );
  }

  Widget _buildPrivacySectionMobile() {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(vertical: 6.h, horizontal: 5.w),
      decoration: BoxDecoration(
        color: const Color(0xFFF8F9FA),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.03),
            blurRadius: 10,
            spreadRadius: 1,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFF2D3748), Color(0xFF000000)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds),
            child: Text(
              "Your Privacy Matters",
              textAlign: TextAlign.center,
              style: GoogleFonts.poppins(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
          SizedBox(height: 1.h),
          Text(
            "We don't use your data to train Yoobble",
            textAlign: TextAlign.center,
            style: GoogleFonts.poppins(
              fontSize: 20,
              fontWeight: FontWeight.w500,
              color: Colors.grey.shade800,
            ),
          ),
          SizedBox(height: 3.h),
          Container(
            padding: EdgeInsets.all(4.w),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.04),
                  blurRadius: 15,
                  spreadRadius: 1,
                ),
              ],
            ),
            child: Text(
              "Yoobble does not use your personal data, including your prompts, generated content, or any uploaded materials for training purposes. Your creativity stays yours.",
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                fontSize: 14,
                color: Colors.grey.shade700,
                height: 1.6,
              ),
            ),
          ),
          SizedBox(height: 5.h),
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              _buildPrivacyIcon(Icons.keyboard_alt_outlined),
              _buildPrivacyIconHighlighted(Icons.lock_outline),
              _buildPrivacyIcon(Icons.article_outlined),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildPrivacyIcon(IconData icon) {
    return Container(
      padding: EdgeInsets.all(3.w),
      decoration: BoxDecoration(
        color: Colors.white,
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            spreadRadius: 1,
          ),
        ],
      ),
      child: Icon(
        icon,
        size: 8.w,
        color: Colors.grey.shade600,
      ),
    );
  }

  Widget _buildPrivacyIconHighlighted(IconData icon) {
    return Container(
      padding: EdgeInsets.all(3.w),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF2D3748), Color(0xFF000000)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 10,
            spreadRadius: 1,
          ),
        ],
      ),
      child: Icon(
        icon,
        size: 8.w,
        color: Colors.white,
      ),
    );
  }

  Widget _buildGlobalSectionMobile() {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 6.h, horizontal: 5.w),
      child: Column(
        children: [
          Text(
            'Global Content Creation Assistant',
            style: GoogleFonts.poppins(
              fontSize: 22,
              fontWeight: FontWeight.w600,
              color: Colors.black,
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 1.h),
          Text(
            "Supporting creators across 90+ countries",
            style: GoogleFonts.inter(
              fontSize: 14,
              color: Colors.grey.shade700,
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 4.h),
          Container(
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.08),
                  blurRadius: 20,
                  spreadRadius: 5,
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(16),
              child: Image.asset(
                "assets/W.png",
                color: Colors.black,
                height: 180,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget buildFinalCTAMobile(BuildContext context) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(vertical: 7.h, horizontal: 5.w),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Colors.grey.shade50,
            Colors.grey.shade100,
          ],
        ),
      ),
      child: Column(
        children: [
          ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFF2D3748), Color(0xFF000000)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds),
            child: Text(
              'Try Yoobble for free today',
              style: GoogleFonts.poppins(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
              textAlign: TextAlign.center,
            ),
          ),
          SizedBox(height: 3.h),
          Container(
            padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 3.h),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 15,
                  spreadRadius: 1,
                ),
              ],
            ),
            child: Text(
              "Generate your first piece of content with Yoobble AI today and transform your creative process.",
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                fontSize: 14,
                color: Colors.grey.shade700,
                height: 1.6,
              ),
            ),
          ),
          SizedBox(height: 4.h),
          ElevatedButton(
            onPressed: () {
              Navigator.push(context,
                  MaterialPageRoute(builder: (context) => const LoginScreen()));
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.black,
              foregroundColor: Colors.white,
              elevation: 5,
              shadowColor: Colors.black.withOpacity(0.3),
              padding: EdgeInsets.symmetric(horizontal: 12.w, vertical: 1.8.h),
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                const Icon(
                  Icons.rocket_launch,
                  size: 20,
                  color: Colors.white,
                ),
                SizedBox(width: 1.w),
                const Text(
                  "Get Your Free Access",
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFooterMobile(
      String logoUrl, String logoPlaceholder, BuildContext context) {
    return Container(
      width: double.infinity,
      color: const Color(0xFF111827),
      child: Padding(
        padding: EdgeInsets.symmetric(horizontal: 7.w, vertical: 5.h),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                CachedNetworkImage(
                  height: 40,
                  imageUrl: logoUrl,
                  placeholder: (context, url) =>
                      Image.asset(logoPlaceholder, height: 40),
                  errorWidget: (context, url, error) =>
                      Image.asset(logoPlaceholder, height: 40),
                ),
                SizedBox(width: 2.w),
                Text(
                  'Yoobble',
                  style: GoogleFonts.montserrat(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.white,
                  ),
                ),
              ],
            ),
            SizedBox(height: 4.h),

            // Links with dividers for better organization
            _buildFooterLinkWithDivider('Pricing', context),
            _buildFooterLinkWithDivider('Contact', context),
            _buildFooterLinkWithDivider('Supported Countries', context),
            _buildFooterLinkWithDivider('Twitter', context),
            _buildFooterLinkWithDivider('Huggingface', context),
            _buildFooterLinkWithDivider('Terms of Use', context),
            _buildFooterLinkWithDivider('Privacy Policy', context,
                showDivider: false),

            SizedBox(height: 4.h),
            Text(
              'Â© 2025 Yoobble',
              style: GoogleFonts.inter(
                fontSize: 14,
                color: Colors.white.withOpacity(0.7),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildFooterLinkWithDivider(String text, BuildContext context,
      {bool showDivider = true}) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 12),
          child: InkWell(
            onTap: () => _handleLinkTap(text, context),
            child: Text(
              text,
              style: GoogleFonts.inter(
                fontSize: 14,
                color: Colors.white.withOpacity(0.85),
              ),
            ),
          ),
        ),
        if (showDivider)
          Divider(color: Colors.white.withOpacity(0.1), height: 1),
      ],
    );
  }

  Widget _buildSocialIcon(IconData icon) {
    return Container(
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
      ),
      child: Icon(
        icon,
        color: Colors.white,
        size: 20,
      ),
    );
  }

  // ########################################################################
  //////////// #   DESKTOP SECTION BUILDERS   # //////////////////////////////////////////////////////////////////////
  // ########################################################################

  PreferredSizeWidget buildDesktopAppBar(
      BuildContext context, String logoUrl, String logoPlaceholder) {
    return AppBar(
      toolbarHeight: 80,
      surfaceTintColor: Colors.white,
      backgroundColor: Colors.white,
      automaticallyImplyLeading: false,
      elevation: 0,
      shadowColor: Colors.black.withOpacity(0.05),
      title: Padding(
        padding: EdgeInsets.only(left: 4.w),
        child: Row(
          children: [
            CachedNetworkImage(
              height: 40,
              imageUrl: logoUrl,
              placeholder: (context, url) =>
                  Image.asset(logoPlaceholder, height: 40),
              errorWidget: (context, url, error) =>
                  Image.asset(logoPlaceholder, height: 40),
            ),
            const SizedBox(width: 8),
            Text(
              'YOOBBLE',
              style: GoogleFonts.montserrat(
                color: Colors.black,
                fontWeight: FontWeight.bold,
                fontSize: 22,
              ),
            ),
          ],
        ),
      ),
      actions: [
        _buildDesktopNavItem('Pricing', () {
          Navigator.push(
              context,
              MaterialPageRoute(
                  builder: (context) => const SubscriptionBottomSheet()));
        }),
        _buildDesktopNavItem('Contact', () {
          Navigator.push(
              context, MaterialPageRoute(builder: (context) => ContactPage()));
        }),
        _buildDesktopNavItem('Support', () {
          Navigator.push(
              context, MaterialPageRoute(builder: (context) => Support()));
        }),
        SizedBox(width: 1.w),
        Padding(
          padding: const EdgeInsets.symmetric(vertical: 15.0),
          child: AnimatedButton(
            onTap: () {
              Navigator.push(context,
                  MaterialPageRoute(builder: (context) => const LoginScreen()));
            },
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 25, vertical: 12),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFF2D3748), Color(0xFF000000)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(8),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 8,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Text(
                'Login',
                style: GoogleFonts.inter(
                  color: Colors.white,
                  fontWeight: FontWeight.w600,
                  fontSize: 15,
                ),
              ),
            ),
          ),
        ),
        SizedBox(width: 4.w),
      ],
    );
  }

  Widget _buildDesktopHeroSection(BuildContext context) {
    return SlideTransition(
      position: Tween<Offset>(
        begin: const Offset(0, 0.05),
        end: Offset.zero,
      ).animate(CurvedAnimation(
        parent: _animationController, // Use local controller
        curve: Curves.easeOutQuart,
      )),
      child: FadeTransition(
        opacity: CurvedAnimation(
          parent: _animationController, // Use local controller
          curve: const Interval(0.1, 1.0, curve: Curves.easeOut),
        ),
        child: Container(
          color: Colors.white,
          padding: EdgeInsets.symmetric(horizontal: 8.w, vertical: 6.h),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: <Widget>[
              // --- Animated Hero Text (Desktop) ---
              Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  // Static part with original gradient
                  ShaderMask(
                    shaderCallback: (bounds) => const LinearGradient(
                      colors: [Color(0xFF2D3748), Color(0xFF000000)],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ).createShader(bounds),
                    child: Text(
                      'One platform to', // Static text
                      textAlign: TextAlign.center,
                      style: GoogleFonts.poppins(
                        fontSize: 52, // Match original size
                        fontWeight: FontWeight.bold, // Match original weight
                        color: Colors.white, // The ShaderMask will color it
                        height: 1.2,
                      ),
                    ),
                  ),
                  SizedBox(height: 0.8.h), // Small space between lines
                  // Animated changing part with flame gradient
                  AnimatedSuffix(
                    phrases: _changingPhrases,
                    textStyle: GoogleFonts.poppins(
                      fontSize: 48, // Match original size
                      fontWeight: FontWeight.bold, // Match original weight
                      color: Colors.white, // ShaderMask will color it
                      height: 1.2,
                    ),
                    gradient: const LinearGradient(
                      colors: [
                        Color.fromARGB(255, 41, 80, 164),
                        Color(0xFF2D3748)
                      ], // Flame colors
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    ),
                    interval: const Duration(seconds: 3),
                  ),
                ],
              ),
              // --- End Animated Hero Text ---

              SizedBox(height: 4.h),
              Container(
                width: 50.w,
                padding: EdgeInsets.symmetric(horizontal: 3.w, vertical: 2.h),
                decoration: BoxDecoration(
                  color: Colors.grey.shade50,
                  borderRadius: BorderRadius.circular(15),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.03),
                      blurRadius: 15,
                      spreadRadius: 1,
                    ),
                  ],
                ),
                child: Text(
                  'Yoobble empowers creators, marketers, and businesses to generate high-quality\ncontent in minutes. Say goodbye to writer\'s block and hello to effortless creation.',
                  textAlign: TextAlign.center,
                  style: GoogleFonts.inter(
                    fontSize: 16,
                    height: 1.7,
                    color: Colors.grey.shade800,
                  ),
                ),
              ),
              SizedBox(height: 5.h),
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => const LoginScreen()));
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.black,
                  foregroundColor: Colors.white,
                  elevation: 5,
                  shadowColor: Colors.black.withOpacity(0.3),
                  padding:
                      const EdgeInsets.symmetric(horizontal: 50, vertical: 20),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Icon(Icons.bolt, size: 22, color: Colors.white),
                    const SizedBox(width: 10),
                    Text(
                      "Start Creating Now",
                      style: GoogleFonts.inter(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: 10.h),
              // Hero image with shadow and animation
              Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(24),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 30,
                      spreadRadius: 5,
                      offset: const Offset(0, 15),
                    ),
                  ],
                ),
                child: ClipRRect(
                  borderRadius: BorderRadius.circular(24),
                  child: Image.asset(
                    "assets/Y1.png",
                    height: 75.h,
                    width: 75.w,
                    fit: BoxFit.cover,
                  ),
                ),
              ),
              SizedBox(height: 6.h),
              // Scroll indicator (MODIFIED)
              _buildScrollIndicatorDesktop(),
            ],
          ),
        ),
      ),
    );
  }

  // MODIFIED: Added image avatars and text below scroll indicator
  Widget _buildScrollIndicatorDesktop() {
    const double imageSize = 40.0; // Adjust size as needed for desktop
    const double overlap = 24.0; // Adjust overlap amount (imageSize * 0.6)
    const double socialIconSizeDesktop = 150.0; // Size for new social icons

    return Column(
      children: [
        Text(
          "Scroll to explore Yoobble's features",
          style: GoogleFonts.inter(
            fontSize: 16,
            color: Colors.grey.shade600,
          ),
        ),
        SizedBox(height: 1.h),
        Icon(
          Icons.keyboard_arrow_down_rounded,
          size: 28,
          color: Colors.grey.shade600,
        ),
        SizedBox(height: 4.h), // Space between icon and new element

        // Container with images and text
        Container(
          padding: const EdgeInsets.symmetric(
              horizontal: 20, vertical: 10), // Adjusted padding
          decoration: BoxDecoration(
            color: Colors.grey.shade100, // Light gray background
            borderRadius: BorderRadius.circular(30), // Rounded ends
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 5,
                offset: const Offset(0, 2),
              ),
            ],
          ),
          child: Row(
            mainAxisSize: MainAxisSize.min, // Keep the row size minimal
            children: [
              // Stack for overlapping circular images
              Stack(
                alignment:
                    Alignment.centerLeft, // Align stack content to the left
                children: [
                  // Image 1
                  ClipOval(
                    child: Image.asset('assets/R2.jpg',
                        width: imageSize, height: imageSize, fit: BoxFit.cover),
                  ),
                  // Image 2 (positioned to overlap)
                  Positioned(
                    left:
                        imageSize - overlap, // Position relative to first image
                    child: ClipOval(
                      child: Image.asset('assets/R3.jpg',
                          width: imageSize,
                          height: imageSize,
                          fit: BoxFit.cover),
                    ),
                  ),
                  // Image 3 (positioned to overlap)
                  Positioned(
                    left: 2 *
                        (imageSize -
                            overlap), // Position relative to second image
                    child: ClipOval(
                      child: Image.asset('assets/R4.jpg',
                          width: imageSize,
                          height: imageSize,
                          fit: BoxFit.cover),
                    ),
                  ),
                  // Dummy sized box to give the Stack a defined width based on overlap
                  SizedBox(width: 3 * imageSize - 2 * overlap),
                ],
              ),
              const SizedBox(width: 15), // Space between images and text
              // Text "Join 3,300+ creators"
              Text(
                'Join 100+ Yoobblers',
                style: GoogleFonts.inter(
                  fontSize: 16, // Adjust font size for desktop
                  fontWeight: FontWeight.w500,
                  color: Colors.grey.shade800,
                ),
              ),
            ],
          ),
        ),
        SizedBox(height: 25.h), // Space after the join text

        // New: Text below social platform images
        Text(
          "Optimized for the most popular platforms",
          textAlign: TextAlign.center,
          style: GoogleFonts.inter(
              fontSize: 20, // Adjust font size for desktop
              color: Colors.grey.shade600,
              fontWeight: FontWeight.bold),
        ),
        SizedBox(height: 2.5.h), // Space after the join text
        // New: Row of social platform images
        Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ClipOval(
              child:
                  Image.asset('assets/linkedIn.png', // Assuming .png extension
                      width: socialIconSizeDesktop,
                      height: socialIconSizeDesktop,
                      fit: BoxFit.contain),
            ),
            SizedBox(width: 5.w),
            ClipOval(
              child: Image.asset('assets/tiktok.png', // Assuming .png extension
                  width: socialIconSizeDesktop,
                  height: socialIconSizeDesktop,
                  fit: BoxFit.contain),
            ),
            SizedBox(width: 5.w),
            ClipOval(
              child:
                  Image.asset('assets/youtube.png', // Assuming .png extension
                      width: socialIconSizeDesktop,
                      height: socialIconSizeDesktop,
                      fit: BoxFit.contain),
            ),
            SizedBox(width: 5.w),
            ClipOval(
              child:
                  Image.asset('assets/wattpad.png', // Assuming .png extension
                      width: socialIconSizeDesktop,
                      height: socialIconSizeDesktop,
                      fit: BoxFit.contain),
            ),
          ],
        ),
        SizedBox(height: 3.h), // Space between images and text
      ],
    );
  }

  Widget _buildFAQSectionDesktop() {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(
          vertical: 10.h, horizontal: 15.w), // Wider for desktop
      decoration: BoxDecoration(
        color: const Color(0xFFF8F9FA), // Similar to feature sections
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.03),
            blurRadius: 15,
            spreadRadius: 1,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFF2D3748), Color(0xFF000000)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds),
            child: Text(
              "Frequently Asked Questions",
              textAlign: TextAlign.center,
              style: GoogleFonts.poppins(
                fontSize: 42,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
          SizedBox(height: 2.h),
          Text(
            "Quick answers to common questions about Yoobble and how it can help you.",
            textAlign: TextAlign.center,
            style: GoogleFonts.inter(
              fontSize: 18,
              color: Colors.grey.shade700,
            ),
          ),
          SizedBox(height: 6.h),
          ..._faqData
              .map((faq) => _FAQItem(
                    question: faq['question']!,
                    answer: faq['answer']!,
                    isMobile: false,
                  ))
              .toList(),
        ],
      ),
    );
  }

  Widget _buildPrivacySectionDesktop() {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(vertical: 10.h, horizontal: 10.w),
      decoration: BoxDecoration(
        color: const Color(0xFFF8F9FA),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.03),
            blurRadius: 15,
            spreadRadius: 1,
          ),
        ],
      ),
      child: Column(
        children: [
          ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFF2D3748), Color(0xFF000000)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds),
            child: Text(
              "Your Privacy Matters",
              textAlign: TextAlign.center,
              style: GoogleFonts.poppins(
                fontSize: 42,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
          ),
          SizedBox(height: 1.h),
          Text(
            "We don't use your data to train Yoobble AI.",
            textAlign: TextAlign.center,
            style: GoogleFonts.poppins(
              fontSize: 28,
              fontWeight: FontWeight.w500,
              color: Colors.grey.shade800,
            ),
          ),
          SizedBox(height: 5.h),
          Container(
            width: 50.w,
            padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 3.h),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.04),
                  blurRadius: 20,
                  spreadRadius: 1,
                ),
              ],
            ),
            child: Text(
              "Yoobble AI is committed to your privacy. Your prompts, generated content, and any uploaded materials are never used for training our models. Your creative work remains confidential and exclusively yours.",
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                fontSize: 16,
                color: Colors.grey.shade700,
                height: 1.7,
              ),
            ),
          ),
          SizedBox(height: 8.h),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              _buildDesktopPrivacyIcon(Icons.keyboard_alt_outlined),
              SizedBox(width: 6.w),
              _buildDesktopPrivacyIconHighlighted(Icons.lock_outline),
              SizedBox(width: 6.w),
              _buildDesktopPrivacyIcon(Icons.article_outlined),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildDesktopPrivacyIcon(IconData icon) {
    return Container(
      padding: EdgeInsets.all(2.w),
      decoration: BoxDecoration(
        color: Colors.white,
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 15,
            spreadRadius: 1,
          ),
        ],
      ),
      child: Icon(
        icon,
        size: 5.w,
        color: Colors.grey.shade600,
      ),
    );
  }

  Widget _buildDesktopPrivacyIconHighlighted(IconData icon) {
    return Container(
      padding: EdgeInsets.all(2.5.w),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          colors: [Color(0xFF2D3748), Color(0xFF000000)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        shape: BoxShape.circle,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 15,
            spreadRadius: 1,
          ),
        ],
      ),
      child: Icon(
        icon,
        size: 5.w,
        color: Colors.white,
      ),
    );
  }

  Widget _buildGlobalSectionDesktop() {
    return Container(
      padding: EdgeInsets.symmetric(vertical: 10.h, horizontal: 8.w),
      child: Column(
        children: [
          ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFF2D3748), Color(0xFF000000)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds),
            child: Text(
              'Global Content Creation Assistant',
              style: GoogleFonts.poppins(
                fontSize: 36,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
              textAlign: TextAlign.center,
            ),
          ),
          SizedBox(height: 2.h),
          Text(
            "Supporting creators and businesses across 90+ countries",
            style: GoogleFonts.inter(
              fontSize: 18,
              color: Colors.grey.shade700,
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 6.h),
          Container(
            width: 65.w,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(24),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.08),
                  blurRadius: 30,
                  spreadRadius: 5,
                ),
              ],
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(24),
              child: Image.asset(
                "assets/W.png",
                color: Colors.black,
                fit: BoxFit.contain,
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget buildFinalCTADesktop(BuildContext context) {
    return Container(
      width: double.infinity,
      padding: EdgeInsets.symmetric(vertical: 12.h, horizontal: 8.w),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Colors.grey.shade50,
            Colors.grey.shade100,
          ],
        ),
      ),
      child: Column(
        children: [
          ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFF2D3748), Color(0xFF000000)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds),
            child: Text(
              'Ready to Create?',
              style: GoogleFonts.poppins(
                fontSize: 48,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
              textAlign: TextAlign.center,
            ),
          ),
          SizedBox(height: 1.h),
          Text(
            'Start using Yoobble AI free today.',
            style: GoogleFonts.poppins(
              fontSize: 24,
              color: Colors.grey.shade800,
            ),
            textAlign: TextAlign.center,
          ),
          SizedBox(height: 5.h),
          Container(
            width: 50.w,
            padding: EdgeInsets.symmetric(horizontal: 4.w, vertical: 3.h),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 20,
                  spreadRadius: 1,
                ),
              ],
            ),
            child: Text(
              "Experience the future of content creation. Generate your first piece with Yoobble and see the difference.",
              textAlign: TextAlign.center,
              style: GoogleFonts.inter(
                fontSize: 16,
                color: Colors.grey.shade700,
                height: 1.7,
              ),
            ),
          ),
          SizedBox(height: 6.h),
          AnimatedButton(
            onTap: () {
              Navigator.push(context,
                  MaterialPageRoute(builder: (context) => const LoginScreen()));
            },
            child: Container(
              padding: const EdgeInsets.symmetric(horizontal: 60, vertical: 20),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFF2D3748), Color(0xFF000000)],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(12),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.2),
                    blurRadius: 15,
                    offset: const Offset(0, 5),
                  ),
                ],
              ),
              child: Row(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Icon(
                    Icons.rocket_launch,
                    color: Colors.white,
                    size: 22,
                  ),
                  const SizedBox(width: 12),
                  Text(
                    "Get Started - It's Free!",
                    style: GoogleFonts.inter(
                      color: Colors.white,
                      fontWeight: FontWeight.bold,
                      fontSize: 18,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildFooterDesktop(
      String logoUrl, String logoPlaceholder, BuildContext context) {
    return Container(
      width: double.infinity,
      color: const Color(0xFF111827),
      child: Padding(
        padding: EdgeInsets.symmetric(horizontal: 8.w, vertical: 8.h),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Left: Logo and Copyright
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    CachedNetworkImage(
                      height: 40,
                      imageUrl: logoUrl,
                      placeholder: (context, url) =>
                          Image.asset(logoPlaceholder, height: 40),
                      errorWidget: (context, url, error) =>
                          Image.asset(logoPlaceholder, height: 40),
                    ),
                    const SizedBox(width: 10),
                    Text(
                      'YOOBBLE',
                      style: GoogleFonts.montserrat(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                        color: Colors.white,
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 3.h),
                Text(
                  'Â© 2025 Yoobble',
                  style: GoogleFonts.inter(
                    fontSize: 14,
                    color: Colors.white.withOpacity(0.7),
                  ),
                ),
                SizedBox(height: 2.h),
              ],
            ),
            const Spacer(),
            // Right: Links (columns)
            Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildFooterLinkColumn(context, "Product", [
                  'Pricing',
                  'Updates',
                ]),
                SizedBox(width: 8.w),
                _buildFooterLinkColumn(
                    context, "Company", ['Contact', 'Founder']),
                SizedBox(width: 8.w),
                _buildFooterLinkColumn(context, "Resources", [
                  'Supported Countries',
                  'Twitter',
                  'Huggingface',
                ]),
                SizedBox(width: 8.w),
                _buildFooterLinkColumn(context, "Legal", [
                  'Terms of Use',
                  'Privacy Policy',
                ]),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSocialIconDesktop(IconData icon) {
    return Icon(
      icon,
      color: Colors.white,
      size: 20,
    );
  }

  // ########################################################################
  // #                      SHARED SECTION BUILDERS                        #
  // ########################################################################

  // --- Helper for Desktop Nav Items ---
  Widget _buildDesktopNavItem(String text, VoidCallback onPressed) {
    return AnimatedButton(
      onTap: onPressed,
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 18, vertical: 15),
        child: Text(
          text,
          style: GoogleFonts.inter(
            fontSize: 15,
            fontWeight: FontWeight.w500,
            color: Colors.black87,
          ),
        ),
      ),
    );
  }

  // --- Helper for Footer Link Columns (Desktop) ---
  Widget _buildFooterLinkColumn(
      BuildContext context, String title, List<String> links) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: GoogleFonts.poppins(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: Colors.white,
            letterSpacing: 0.5,
          ),
        ),
        SizedBox(height: 2.h),
        ...links
            .map((link) => Padding(
                  padding: const EdgeInsets.only(bottom: 14.0),
                  child: AnimatedButton(
                    onTap: () => _handleLinkTap(link, context),
                    child: Text(
                      link,
                      style: GoogleFonts.inter(
                        fontSize: 14,
                        color: Colors.white.withOpacity(0.85),
                      ),
                    ),
                  ),
                ))
            .toList(),
      ],
    );
  }

  // --- Helper for Building Mobile Feature Sections ---
  Widget _buildFeatureSectionMobile({
    required BuildContext context,
    required Color bgColor,
    required String title,
    required String subtitle,
    required String description,
    required List<String> bulletPoints,
    required String imageUrl,
    required String imageAsset,
    bool imageFirst = false,
    bool showAnimation = false,
  }) {
    final textSection = Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Center(
          child: ShaderMask(
            shaderCallback: (bounds) => const LinearGradient(
              colors: [Color(0xFF2D3748), Color(0xFF000000)],
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
            ).createShader(bounds),
            child: Text(
              title,
              style: GoogleFonts.poppins(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
              textAlign: TextAlign.center,
            ),
          ),
        ),
        SizedBox(height: 1.h),
        Center(
          child: Text(
            subtitle,
            style: GoogleFonts.poppins(
              fontSize: 18,
              color: Colors.grey.shade700,
            ),
            textAlign: TextAlign.center,
          ),
        ),
        SizedBox(height: 3.h),
        Container(
          padding: EdgeInsets.all(4.w),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.03),
                blurRadius: 10,
                spreadRadius: 1,
              ),
            ],
          ),
          child: Text(
            description,
            style: GoogleFonts.inter(
              fontSize: 14,
              color: Colors.grey.shade700,
              height: 1.6,
            ),
          ),
        ),
        SizedBox(height: 3.h),
        // Bullet Points
        ...bulletPoints
            .map((point) => Padding(
                  padding: const EdgeInsets.only(bottom: 12.0),
                  child: Row(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Container(
                        padding: const EdgeInsets.all(6),
                        decoration: BoxDecoration(
                          color: const Color(0xFF111827),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: const Icon(
                          Icons.check,
                          size: 14,
                          color: Colors.white,
                        ),
                      ),
                      SizedBox(width: 3.w),
                      Expanded(
                        child: Text(
                          point,
                          style: GoogleFonts.inter(
                            fontSize: 14,
                            height: 1.5,
                            color: Colors.grey.shade800,
                          ),
                        ),
                      ),
                    ],
                  ),
                ))
            .toList(),
      ],
    );

    final imageSection = Container(
      margin: EdgeInsets.only(top: 4.h, bottom: 2.h),
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 15,
            spreadRadius: 1,
            offset: const Offset(0, 8),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(16),
        child: Image.asset(
          imageAsset,
          fit: BoxFit.cover,
        ),
      ),
    );

    Widget content = showAnimation
        ? SlideTransition(
            position: Tween<Offset>(
              begin: const Offset(0, 0.1),
              end: Offset.zero,
            ).animate(CurvedAnimation(
              parent: _animationController, // Use local controller
              curve: const Interval(0.1, 1.0, curve: Curves.easeOutQuint),
            )),
            child: Column(
              children: imageFirst
                  ? [imageSection, SizedBox(height: 3.h), textSection]
                  : [textSection, imageSection],
            ),
          )
        : Column(
            children: imageFirst
                ? [imageSection, SizedBox(height: 3.h), textSection]
                : [textSection, imageSection],
          );

    return Container(
      width: double.infinity,
      color: bgColor,
      padding: EdgeInsets.symmetric(vertical: 6.h, horizontal: 5.w),
      child: content,
    );
  }

  // --- Helper for Building Desktop Feature Sections ---
  Widget _buildFeatureSectionDesktop({
    required BuildContext context,
    required Color bgColor,
    required String title,
    required String subtitle,
    required String description,
    required List<String> bulletPoints,
    required String imageUrl,
    required String imageAsset,
    required bool textLeft,
  }) {
    final textWidget = Expanded(
      flex: 5,
      child: SlideTransition(
        position: Tween<Offset>(
          begin: Offset(textLeft ? -0.05 : 0.05, 0),
          end: Offset.zero,
        ).animate(CurvedAnimation(
          parent: _animationController, // Use local controller
          curve: const Interval(0.1, 1.0, curve: Curves.easeOutQuint),
        )),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            ShaderMask(
              shaderCallback: (bounds) => const LinearGradient(
                colors: [Color(0xFF2D3748), Color(0xFF000000)],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ).createShader(bounds),
              child: Text(
                title,
                style: GoogleFonts.poppins(
                  fontSize: 40,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                  height: 1.2,
                ),
              ),
            ),
            SizedBox(height: 1.h),
            Text(
              subtitle,
              style: GoogleFonts.poppins(
                fontSize: 22,
                color: Colors.grey.shade700,
              ),
            ),
            SizedBox(height: 4.h),
            Container(
              padding: EdgeInsets.all(2.w),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.03),
                    blurRadius: 15,
                    spreadRadius: 1,
                  ),
                ],
              ),
              child: Text(
                description,
                style: GoogleFonts.inter(
                  fontSize: 16,
                  color: Colors.grey.shade700,
                  height: 1.7,
                ),
              ),
            ),
            SizedBox(height: 4.h),
            // Bullet Points
            ...bulletPoints
                .map((point) => Padding(
                      padding: const EdgeInsets.only(bottom: 15.0),
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Container(
                            padding: const EdgeInsets.all(8),
                            decoration: BoxDecoration(
                              color: const Color(0xFF111827),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            child: const Icon(
                              Icons.check,
                              size: 16,
                              color: Colors.white,
                            ),
                          ),
                          SizedBox(width: 1.w),
                          Expanded(
                            child: Text(
                              point,
                              style: GoogleFonts.inter(
                                fontSize: 16,
                                height: 1.5,
                                color: Colors.grey.shade800,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ))
                .toList(),
          ],
        ),
      ),
    );

    final imageWidget = Expanded(
      flex: 6,
      child: SlideTransition(
        position: Tween<Offset>(
          begin: Offset(textLeft ? 0.05 : -0.05, 0),
          end: Offset.zero,
        ).animate(CurvedAnimation(
          parent: _animationController, // Use local controller
          curve: const Interval(0.1, 1.0, curve: Curves.easeOutQuint),
        )),
        child: Container(
          constraints: BoxConstraints(maxHeight: 60.h),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(20),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.1),
                blurRadius: 20,
                spreadRadius: 2,
                offset: const Offset(0, 10),
              ),
            ],
          ),
          child: ClipRRect(
            borderRadius: BorderRadius.circular(20),
            child: Image.asset(
              imageAsset,
              fit: BoxFit.contain,
            ),
          ),
        ),
      ),
    );

    return Container(
      color: bgColor,
      padding: EdgeInsets.symmetric(vertical: 12.h, horizontal: 8.w),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: textLeft
            ? [textWidget, SizedBox(width: 5.w), imageWidget]
            : [imageWidget, SizedBox(width: 5.w), textWidget],
      ),
    );
  }

  // --- Mobile Full Screen Menu ---
  void _showFullScreenMenu(
      BuildContext context, String logoUrl, String logoPlaceholder) {
    showGeneralDialog(
      context: context,
      barrierDismissible: true,
      barrierLabel: MaterialLocalizations.of(context).modalBarrierDismissLabel,
      barrierColor: Colors.black54,
      transitionDuration: const Duration(milliseconds: 300),
      pageBuilder: (BuildContext buildContext, Animation<double> animation,
          Animation<double> secondaryAnimation) {
        return FadeTransition(
          opacity: animation,
          child: Material(
            color: Colors.white,
            child: SafeArea(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Menu Header with blurred background
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.white,
                      boxShadow: [
                        BoxShadow(
                          color: Colors.black.withOpacity(0.05),
                          blurRadius: 10,
                          offset: const Offset(0, 2),
                        ),
                      ],
                    ),
                    padding:
                        EdgeInsets.symmetric(horizontal: 5.w, vertical: 2.h),
                    child: Row(
                      children: [
                        CachedNetworkImage(
                          height: 40,
                          imageUrl: logoUrl,
                          placeholder: (context, url) =>
                              Image.asset(logoPlaceholder, height: 40),
                          errorWidget: (context, url, error) =>
                              Image.asset(logoPlaceholder, height: 40),
                        ),
                        Padding(
                          padding: EdgeInsets.only(left: 2.w),
                          child: Text(
                            'Yoobble',
                            style: GoogleFonts.montserrat(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                        const Spacer(),
                        IconButton(
                          icon: const Icon(Icons.close, size: 28),
                          onPressed: () => Navigator.of(context).pop(),
                        ),
                      ],
                    ),
                  ),

                  // Menu Items
                  Expanded(
                    child: ListView(
                      padding:
                          EdgeInsets.symmetric(horizontal: 5.w, vertical: 3.h),
                      children: [
                        _buildMenuItemEnhanced(context, 'Pricing',
                            Icons.sell_outlined, 'Get premium features', () {
                          Navigator.pop(context);
                          Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) =>
                                      const SubscriptionBottomSheet()));
                        }),
                        _buildMenuItemEnhanced(
                            context,
                            'Founder',
                            Icons.man_sharp,
                            'Talk directly with the founder', () {
                          Navigator.pop(context);
                          // Navigate or scroll to features section
                          Navigator.pop(context);
                          _launchUrlFounder();
                        }),
                        _buildMenuItemEnhanced(context, 'Contact',
                            Icons.mail_outline, 'Reach out to our team', () {
                          Navigator.pop(context);
                          Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => ContactPage()));
                        }),
                        _buildMenuItemEnhanced(
                            context,
                            'Supported Countries',
                            Icons.public_outlined,
                            'Where Yoobble is available', () {
                          Navigator.pop(context);
                          Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) => const Support()));
                        }),
                        _buildMenuItemEnhanced(context, 'Twitter',
                            Icons.person_outline, 'Follow us on Twitter', () {
                          Navigator.pop(context);
                          _launchUrlX();
                        }),
                      ],
                    ),
                  ),

                  // Bottom CTA Button
                  Padding(
                    padding:
                        EdgeInsets.symmetric(horizontal: 5.w, vertical: 4.h),
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.black,
                        foregroundColor: Colors.white,
                        minimumSize: const Size(double.infinity, 55),
                        elevation: 5,
                        shadowColor: Colors.black.withOpacity(0.3),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                      onPressed: () {
                        Navigator.pop(context);
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                                builder: (context) => const LoginScreen()));
                      },
                      child: Row(
                        mainAxisSize: MainAxisSize.min,
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          const Icon(
                            Icons.bolt,
                            size: 20,
                            color: Colors.white,
                          ),
                          SizedBox(width: 2.w),
                          const Text(
                            'Get Started Free',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
        );
      },
    );
  }

  // --- Enhanced Menu Item ---
  Widget _buildMenuItemEnhanced(BuildContext context, String title,
      IconData icon, String subtitle, VoidCallback onTap) {
    return Container(
      margin: const EdgeInsets.only(bottom: 15),
      decoration: BoxDecoration(
        color: Colors.grey.shade50,
        borderRadius: BorderRadius.circular(12),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.02),
            blurRadius: 8,
            spreadRadius: 1,
          ),
        ],
      ),
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  color: Colors.grey.shade100,
                  borderRadius: BorderRadius.circular(10),
                ),
                child: Icon(icon, color: Colors.black87, size: 22),
              ),
              const SizedBox(width: 15),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      title,
                      style: GoogleFonts.poppins(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                        color: Colors.black87,
                      ),
                    ),
                    Text(
                      subtitle,
                      style: GoogleFonts.inter(
                        fontSize: 12,
                        color: Colors.grey.shade600,
                      ),
                    ),
                  ],
                ),
              ),
              const Icon(
                Icons.arrow_forward_ios,
                color: Colors.grey,
                size: 14,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// ########################################################################
// #                    AUXILIARY CLASSES & CONSTANTS                     #
// ########################################################################

// ResponsiveText sizes
const double a12 = 12;

// --- List of Footer Links ---
final List<String> middleLinks = [
  'Pricing',
  'Contact',
  'Supported Countries',
  'Twitter',
  'Huggingface',
  'Terms of Use',
  'Privacy Policy',
];

// --- URL Definitions ---
final Uri _urlTerms = Uri.parse(
    'https://www.freeprivacypolicy.com/live/3dbf382c-b399-486f-863a-1a414eff3922');
final Uri _urlPrivacy = Uri.parse(
    'https://www.freeprivacypolicy.com/live/3dbf382c-b399-486f-863a-1a414eff3922');
final Uri _urlX =
    Uri.parse('https://x.com/Yoobble_?t=mS7N_64DepPOLJaFm5y6QA&s=09');
final Uri _urlFounder = Uri.parse("https://x.com/The_Real_Paolo");
final Uri _urlFace = Uri.parse('https://huggingface.co/YoobbleAI');

// --- URL Launch Functions ---
Future<void> _launchUrlTerms() async {
  if (!await launchUrl(_urlTerms)) {
    print('Could not launch $_urlTerms');
  }
}

Future<void> _launchUrlPrivacy() async {
  if (!await launchUrl(_urlPrivacy)) {
    print('Could not launch $_urlPrivacy');
  }
}

Future<void> _launchUrlX() async {
  if (!await launchUrl(_urlX)) {
    print('Could not launch $_urlX');
  }
}

Future<void> _launchUrlFounder() async {
  if (!await launchUrl(_urlFounder)) {
    print('Could not launch $_urlFounder');
  }
}

Future<void> _launchUrlFace() async {
  if (!await launchUrl(_urlFace)) {
    print('Could not launch $_urlFace');
  }
}

void _handleLinkTap(String text, BuildContext context) {
  // Standardize link text checks (case-insensitive)
  final String lowerCaseText = text.toLowerCase();

  if (lowerCaseText == "terms of use") {
    _launchUrlTerms();
  } else if (lowerCaseText == "privacy policy") {
    _launchUrlPrivacy();
  } else if (lowerCaseText == 'twitter') {
    _launchUrlX();
  } else if (lowerCaseText == 'founder') {
    _launchUrlFounder();
  } else if (lowerCaseText == 'huggingface') {
    _launchUrlFace();
  } else if (lowerCaseText == 'supported countries') {
    Navigator.push(
        context, MaterialPageRoute(builder: (context) => const Support()));
  } else if (lowerCaseText == 'pricing') {
    Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => const SubscriptionBottomSheet()));
  } else if (lowerCaseText == 'contact') {
    Navigator.push(
        context, MaterialPageRoute(builder: (context) => ContactPage()));
  } else if (lowerCaseText == 'blog') {
    print("Navigate to Blog");
  }
}

// ########################################################################
// #                        ANIMATION COMPONENTS                         #
// ########################################################################

// Custom Widget for the Animated Gradient Suffix Text
class AnimatedSuffix extends StatefulWidget {
  final List<String> phrases;
  final TextStyle textStyle;
  final Gradient gradient;
  final Duration interval;

  const AnimatedSuffix({
    Key? key,
    required this.phrases,
    required this.textStyle,
    required this.gradient,
    this.interval = const Duration(seconds: 2),
  }) : super(key: key);

  @override
  State<AnimatedSuffix> createState() => _AnimatedSuffixState();
}

class _AnimatedSuffixState extends State<AnimatedSuffix> {
  Timer? _timer;
  int _currentIndex = 0;

  @override
  void initState() {
    super.initState();
    _timer = Timer.periodic(widget.interval, (timer) {
      setState(() {
        _currentIndex = (_currentIndex + 1) % widget.phrases.length;
      });
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedSwitcher(
      duration: const Duration(milliseconds: 500), // Animation speed
      transitionBuilder: (Widget child, Animation<double> animation) {
        // Slide transition from bottom
        const begin = Offset(0.0, 1.0);
        const end = Offset.zero;
        final tween = Tween(begin: begin, end: end);
        final offsetAnimation = animation.drive(tween);

        return ClipRect(
          // Clip to prevent text from showing outside bounds during transition
          child: SlideTransition(
            position: offsetAnimation,
            child: FadeTransition(
              // Combine slide with fade for smoother effect
              opacity: animation,
              child: child,
            ),
          ),
        );
      },
      child: ShaderMask(
        // Key is essential for AnimatedSwitcher to know the child changed
        key: ValueKey<int>(_currentIndex),
        shaderCallback: (bounds) {
          return widget.gradient.createShader(
            // Create shader based on the bounds of the text widget
            Rect.fromLTWH(0, 0, bounds.width, bounds.height),
          );
        },
        child: Text(
          widget.phrases[_currentIndex],
          style: widget.textStyle
              .copyWith(color: Colors.white), // Color is masked by the shader
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}

class AnimatedButton extends StatefulWidget {
  final Widget child;
  final VoidCallback onTap;

  const AnimatedButton({
    Key? key,
    required this.child,
    required this.onTap,
  }) : super(key: key);

  @override
  State<AnimatedButton> createState() => _AnimatedButtonState();
}

class _AnimatedButtonState extends State<AnimatedButton>
    with SingleTickerProviderStateMixin {
  late AnimationController _controller;
  late Animation<double> _scaleAnimation;
  bool isHovered = false;

  @override
  void initState() {
    super.initState();
    _controller = AnimationController(
      duration: const Duration(milliseconds: 150),
      vsync: this,
    );
    _scaleAnimation = Tween<double>(begin: 1.0, end: 0.95).animate(
      CurvedAnimation(
        parent: _controller,
        curve: Curves.easeInOut,
      ),
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      onEnter: (event) => setState(() => isHovered = true),
      onExit: (event) => setState(() => isHovered = false),
      cursor: SystemMouseCursors.click,
      child: GestureDetector(
        onTapDown: (_) => _controller.forward(),
        onTapCancel: () => _controller.reverse(),
        onTap: widget.onTap,
        child: ScaleTransition(
          scale: _scaleAnimation,
          child: widget.child,
        ),
      ),
    );
  }
}

// ########################################################################
// #                          FAQ ITEM WIDGET                           #
// ########################################################################

class _FAQItem extends StatefulWidget {
  final String question;
  final String answer;
  final bool isMobile; // To adapt padding/font sizes

  const _FAQItem({
    Key? key,
    required this.question,
    required this.answer,
    required this.isMobile,
  }) : super(key: key);

  @override
  State<_FAQItem> createState() => _FAQItemState();
}

class _FAQItemState extends State<_FAQItem>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _heightFactor;
  bool _isExpanded = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _heightFactor = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutCubic, // A smooth curve for expansion/collapse
    );
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _toggleExpansion() {
    setState(() {
      _isExpanded = !_isExpanded;
      if (_isExpanded) {
        _animationController.forward();
      } else {
        _animationController.reverse();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(bottom: widget.isMobile ? 2.h : 2.5.h),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(widget.isMobile ? 12 : 16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 10,
            spreadRadius: 1,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          Material(
            color: Colors.transparent, // To allow InkWell's ripple to be seen
            child: InkWell(
              borderRadius: BorderRadius.circular(widget.isMobile ? 12 : 16),
              onTap: _toggleExpansion,
              child: Padding(
                padding: EdgeInsets.symmetric(
                  horizontal: widget.isMobile ? 4.w : 2.5.w,
                  vertical: widget.isMobile ? 1.8.h : 2.5.h,
                ),
                child: Row(
                  children: [
                    Expanded(
                      child: Text(
                        widget.question,
                        style: GoogleFonts.poppins(
                          fontSize: widget.isMobile ? 16 : 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.black87,
                        ),
                      ),
                    ),
                    Icon(
                      _isExpanded ? Icons.remove : Icons.add,
                      color: Colors.black,
                      size: widget.isMobile ? 24 : 28,
                    ),
                  ],
                ),
              ),
            ),
          ),
          SizeTransition(
            sizeFactor: _heightFactor,
            axisAlignment: -1.0, // Aligns content to the top during expansion
            child: Padding(
              padding: EdgeInsets.only(
                bottom: widget.isMobile ? 2.h : 2.5.h,
                left: widget.isMobile ? 4.w : 2.5.w,
                right: widget.isMobile ? 4.w : 2.5.w,
              ),
              child: Text(
                widget.answer,
                style: GoogleFonts.inter(
                  fontSize: widget.isMobile ? 14 : 16,
                  color: Colors.grey.shade700,
                  height: 1.6,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
